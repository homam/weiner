// Generated by CoffeeScript 1.6.2
(function() {
  var cos, pi, pow, rotate, rotationMatrix, sin, translate;

  cos = Math.cos;

  sin = Math.sin;

  pow = Math.pow;

  pi = Math.PI;

  rotationMatrix = function(angle) {
    return [[cos(angle), -sin(angle)], [sin(angle), cos(angle)]];
  };

  translate = function(vector, p) {
    return {
      x: vector.x + p.x,
      y: vector.y + p.y
    };
  };

  rotate = function(angle, p) {
    var x, y;

    x = p.x;
    y = p.y;
    return {
      x: x * cos(angle) - y * sin(angle),
      y: x * sin(angle) + y * cos(angle)
    };
  };

  window.addEventListener('load', function() {
    var $g, $svg, $viewport, animating, bezier, circleR, draw, frequency, height, href, image, imageSize, length, line, links, sizeChanged, speed, time, width;

    $viewport = document.getElementById("viewport");
    width = height = circleR = imageSize = null;
    $svg = d3.select($viewport).append("svg");
    $g = $svg.append('g');
    sizeChanged = function() {
      width = $viewport.clientWidth;
      height = $viewport.clientHeight;
      imageSize = Math.min(width, height) / 8;
      circleR = imageSize / 2;
      $svg.attr("width", width).attr("height", height);
      return $g.attr("transform", "translate(" + (width / 2) + "," + (height / 2) + ")");
    };
    window.addEventListener('resize', function() {
      return sizeChanged();
    });
    sizeChanged();
    bezier = function(p0, p1, p2, p3) {
      return function(t) {
        var v;

        v = function(w) {
          return pow(1 - t, 3) * p0[w] + 3 * pow(1 - t, 2) * t * p1[w] + 3 * (1 - t) * t * t * p2[w] + t * t * t * p3[w];
        };
        return {
          x: v('x'),
          y: v('y')
        };
      };
    };
    line = d3.svg.line().x(function(d) {
      return d.x;
    }).y(function(d) {
      return d.y;
    }).interpolate("basis");
    links = [
      {
        image: 'images/linkedin.svg',
        href: 'http://www.linkedin.com/in/homamhosseini'
      }, {
        image: 'images/facebook.svg',
        href: 'https://www.facebook.com/homam.me'
      }, {
        image: 'images/twitter.svg',
        href: 'https://twitter.com/homam'
      }, {
        image: 'images/h.svg',
        href: 'cv'
      }, {
        image: 'images/github.svg',
        href: 'https://github.com/homam'
      }
    ];
    length = links.length;
    image = function(d, i) {
      return links[i].image;
    };
    href = function(d, i) {
      return links[i].href;
    };
    animating = true;
    frequency = 100;
    speed = .01;
    time = 0;
    draw = function() {
      var b, t;

      setTimeout(draw, frequency);
      if (!animating) {
        return;
      }
      time++;
      t = time * speed * pi;
      b = bezier({
        x: 0,
        y: 0
      }, {
        x: .2,
        y: 2 * sin(t)
      }, {
        x: .7,
        y: -.8 * cos(t)
      }, {
        x: 1,
        y: 0
      });
      (function() {
        var $line, a, bezPoints;

        bezPoints = ((function() {
          var _i, _results;

          _results = [];
          for (a = _i = 0; _i <= 3; a = ++_i) {
            _results.push(-t * .125 + .5 * a);
          }
          return _results;
        })()).map(function(a) {
          var x;

          return ((function() {
            var _i, _results;

            _results = [];
            for (x = _i = 0; _i <= 5; x = ++_i) {
              _results.push(rotate(a * pi, b(x / 5)));
            }
            return _results;
          })()).map(function(p) {
            return {
              x: p.x * width * .6,
              y: p.y * height * .6
            };
          });
        });
        $line = $g.selectAll('path.bez').data(bezPoints);
        $line.enter().append('path').attr('class', 'bez');
        return $line.transition().ease('linear').duration(frequency).attr("d", line);
      })();
      (function() {
        var $sinLine, a, points;

        points = ((function() {
          var _i, _ref, _results;

          _results = [];
          for (a = _i = 0, _ref = length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; a = 0 <= _ref ? ++_i : --_i) {
            _results.push(.25 + -t * .25 + (1 / (length / 2)) * a);
          }
          return _results;
        })()).map(function(a) {
          var x;

          return ((function() {
            var _i, _results;

            _results = [];
            for (x = _i = 0; _i <= 4; x = ++_i) {
              _results.push(rotate(a * pi, {
                x: 2 * pi * x / 4,
                y: sin(x / 4 * pi * 2 + time * pi * speed * 2) - sin(time * pi * speed * 2)
              }));
            }
            return _results;
          })()).map(function(p) {
            return {
              x: p.x * width * .05,
              y: p.y * height * .05
            };
          });
        });
        $sinLine = $g.selectAll('path.sin').data(points);
        $sinLine.enter().append("path").attr('class', 'sin');
        return $sinLine.transition().ease('linear').duration(frequency).attr("d", line);
      })();
      return (function() {
        var $a, $circle, $image, $line, a, points;

        points = ((function() {
          var _i, _ref, _results;

          _results = [];
          for (a = _i = 0, _ref = length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; a = 0 <= _ref ? ++_i : --_i) {
            _results.push(-t * 0.25 + (1 / (length / 2)) * a);
          }
          return _results;
        })()).map(function(a) {
          var x;

          return ((function() {
            var _i, _results;

            _results = [];
            for (x = _i = 0; _i <= 4; x = ++_i) {
              _results.push(rotate(a * pi, {
                x: 2 * pi * x / 4,
                y: sin(x / 4 * pi * 2 + time * pi * .1) - sin(time * pi * .1)
              }));
            }
            return _results;
          })()).map(function(p) {
            return {
              x: p.x * width * .05,
              y: p.y * height * .05
            };
          });
        });
        $line = $g.selectAll('path.csin').data(points);
        $line.enter().append('path').attr('class', 'csin');
        $line.transition().ease('linear').duration(frequency).attr("d", line);
        $circle = $g.selectAll('circle').data(points);
        $circle.enter().append('circle');
        $circle.transition().ease('linear').duration(frequency).attr('cx', function(d) {
          return d[d.length - 1].x;
        }).attr('cy', function(d) {
          return d[d.length - 1].y;
        }).attr('r', circleR);
        $a = $g.selectAll('a').data(points);
        $a.enter().append('a').append('image').attr("xlink:href", image);
        $a.attr('xlink:href', href).transition().ease('linear').duration(frequency);
        $image = $a.select('image');
        $image.attr("width", imageSize).attr("height", imageSize).transition().ease('linear').duration(frequency).attr("transform", function(d, i) {
          return "translate(" + (-imageSize / 2 + d[d.length - 1].x) + " " + (-imageSize / 2 + d[d.length - 1].y) + ") rotate(" + (-6 * time + i * 45) + "," + (imageSize / 2) + "," + (imageSize / 2) + ")";
        });
        $image.on('mouseover', function() {
          return animating = false;
        });
        return $image.on('mouseout', function() {
          if (!animating) {
            return animating = true;
          }
        });
      })();
    };
    return draw();
  });

}).call(this);
