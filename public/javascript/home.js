// Generated by CoffeeScript 1.6.2
(function() {
  var cos, pow, rotate, rotationMatrix, sin, translate;

  cos = Math.cos;

  sin = Math.sin;

  pow = Math.pow;

  rotationMatrix = function(angle) {
    return [[cos(angle), -sin(angle)], [sin(angle), cos(angle)]];
  };

  translate = function(vector, p) {
    return {
      x: vector.x + p.x,
      y: vector.y + p.y
    };
  };

  rotate = function(angle, p) {
    var x, y;

    x = p.x;
    y = p.y;
    return {
      x: x * cos(angle) - y * sin(angle),
      y: x * sin(angle) + y * cos(angle)
    };
  };

  window.addEventListener('load', function() {
    var $g, $svg, $viewport, bezier, circleR, draw, height, image, imageSize, line, links, sinp, time, width;

    $viewport = document.getElementById("viewport");
    width = $viewport.clientWidth;
    height = $viewport.clientHeight;
    circleR = width / 20;
    imageSize = width / 10;
    circleR = imageSize / 2;
    $svg = d3.select($viewport).append("svg").attr("width", width).attr("height", height);
    $g = $svg.append('g').attr("transform", "translate(" + (width / 2) + "," + (height / 2) + ")");
    bezier = function(p0, p1, p2, p3) {
      return function(t) {
        var v;

        v = function(w) {
          return pow(1 - t, 3) * p0[w] + 3 * pow(1 - t, 2) * t * p1[w] + 3 * (1 - t) * t * t * p2[w] + t * t * t * p3[w];
        };
        return {
          x: v('x'),
          y: v('y')
        };
      };
    };
    sinp = function(t) {
      return {
        x: t,
        y: sin(t)
      };
    };
    line = d3.svg.line().x(function(d) {
      return d.x;
    }).y(function(d) {
      return d.y;
    }).interpolate("basis");
    links = [
      {
        image: 'images/linkedin.svg'
      }, {
        image: 'images/facebook.png'
      }, {
        image: 'images/twitter.png'
      }, {
        image: 'favicon.png'
      }
    ];
    image = function(d, i) {
      return links[i].image;
    };
    time = 0;
    draw = function() {
      var $circle, $image, $line, a, b, points, t;

      time++;
      t = time * .1 * Math.PI;
      b = bezier({
        x: 0,
        y: 0
      }, {
        x: sin(t),
        y: 2
      }, {
        x: .7,
        y: -.8
      }, {
        x: 1,
        y: 0
      });
      points = ((function() {
        var _i, _results;

        _results = [];
        for (a = _i = 0; _i <= 3; a = ++_i) {
          _results.push(-t * .25 + .5 * a);
        }
        return _results;
      })()).map(function(a) {
        var x;

        return ((function() {
          var _i, _results;

          _results = [];
          for (x = _i = 0; _i <= 10; x = ++_i) {
            _results.push(rotate(a * Math.PI, b(x / 10)));
          }
          return _results;
        })()).map(function(p) {
          return {
            x: p.x * width * .4,
            y: p.y * height * .25
          };
        });
      });
      $line = $g.selectAll('path').data(points);
      $line.enter().append('path');
      $line.transition().ease('linear').duration(1000).attr("d", line);
      $circle = $g.selectAll('circle').data(points);
      $circle.enter().append('circle');
      $circle.transition().ease('linear').duration(1000).attr('cx', function(d) {
        return d[d.length - 1].x;
      }).attr('cy', function(d) {
        return d[d.length - 1].y;
      }).attr('r', circleR);
      $image = $g.selectAll('image').data(points);
      $image.enter().append("image").attr("xlink:href", image).attr("width", imageSize).attr("height", imageSize);
      return $image.transition().ease('linear').duration(1000).attr("transform", function(d, i) {
        return "translate(" + (-imageSize / 2 - d[d.length - 1].x) + " " + (-imageSize / 2 - d[d.length - 1].y) + ") rotate(" + (-12 * time + i * 45) + "," + (imageSize / 2) + "," + (imageSize / 2) + ")";
      });
    };
    return setInterval(draw, 1000);
  });

}).call(this);
